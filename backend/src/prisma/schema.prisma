generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name        String
  email       String   @unique
  password    String
  description String   @default("")
  phone       String   @default("")
  avatar      String?
  ads         Ad[]
  adsLikes    AdLike[]
  balance     String   @default("0")

  permissions UserPermission[]
  createdAt   DateTime         @default(now())
}

enum UserPermission {
  BLOCK_ADS
  ALL
}

model Category {
  id            String        @id @default(uuid())
  slug          String        @unique
  name          String
  sequence      String
  subcategories Subcategory[]
  ads           Ad[]

  createdAt DateTime @default(now())
}

model Subcategory {
  id         String   @id @default(uuid())
  slug       String   @unique
  name       String
  sequence   String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  ads        Ad[]

  createdAt DateTime @default(now())
}

model VehicleBrand {
  id       String         @id @default(uuid())
  name     String         @unique
  sequence String
  models   VehicleModel[]
  carsInfo CarInfo[]

  createdAt DateTime @default(now())
}

model VehicleModel {
  id       String       @id @default(uuid())
  name     String       @unique
  sequence String
  type     String
  brand    VehicleBrand @relation(fields: [brandId], references: [id])
  brandId  String
  carsInfo CarInfo[]

  createdAt DateTime @default(now())
}

model Ad {
  id           String @id @default(uuid())
  serialNumber Int    @unique @default(autoincrement())

  categoryId    String
  category      Category    @relation(fields: [categoryId], references: [id])
  subcategoryId String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])

  title       String
  description String
  price       String
  city        String
  images      String[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  adsLikes AdLike[]

  CarInfo CarInfo?

  createdAt DateTime  @default(now())
  blockedAt DateTime?
  deletedAt DateTime?
}

model AdLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  ad        Ad       @relation(fields: [adId], references: [id])
  adId      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([adId, userId])
}

model CarInfo {
  id String @id @default(uuid())

  brand          VehicleBrand? @relation(fields: [vehicleBrandId], references: [id])
  vehicleBrandId String?
  model          VehicleModel? @relation(fields: [vehicleModelId], references: [id])
  vehicleModelId String?

  ad   Ad?     @relation(fields: [adId], references: [id])
  adId String? @unique

  year         String
  steering     String
  bodyType     String
  power        String
  engineType   String
  transmission String
  driveType    String
  mileage      String
  condition    String

  createdAt DateTime @default(now())
}
